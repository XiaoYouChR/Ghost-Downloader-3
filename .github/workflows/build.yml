name: Build Ghost Downloader 3

on:
  workflow_dispatch:

jobs:
  build-windows:
    strategy:
      matrix:
        architecture: [x86_64, arm64]
    runs-on: windows-2019
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --timeout=300 -r requirements.txt
#         双方式打包，Nuitka+PyInstaller
          pip install nuitka==2.6.4
          pip install pyinstaller

      - name: Build with Nuitka & PyInstaller
        run: |
          python -c "from app.common.config import VERSION; f = open('version.txt', 'w'); f.write(VERSION); f.close()"
          $VERSION = gc version.txt
          Write-Host "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $env:GITHUB_ENV
          del version.txt
          python deploy.py nuitka
          python deploy.py pyinstaller
#          nuitka --module plugins/jy_os_page.py
#          mv jy_os_page*.pyd output/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          [
            {
              name: Ghost-Downloader-v${{ env.VERSION }}-Nuitka-Windows-${{ matrix.architecture }},
              path: dist/Ghost-Downloader-3.dist
            },{
              name: Ghost-Downloader-v${{ env.VERSION }}-PyInstaller-Windows-${{ matrix.architecture }},
              path: dist/pyinstaller
            }
          ]

  build-macos-14-arm:
    strategy:
      matrix:
        architecture: [arm64]
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --timeout=300 -r requirements.txt
          pip install nuitka==2.6.4
          pip install pyinstaller

      - name: Build with Nuitka & PyInstaller
        run: |
          python3 -c "import sys; sys.path.append('./app/common'); import config; print(config.VERSION)" > version.txt
          version=$(sed -n '4p' version.txt)
          echo "VERSION=${version}" >> "$GITHUB_ENV"
          rm -rf version.txt
          python3 deploy.py nuitka
          python3 deploy.py pyinstaller
          chmod u+x "dist/Ghost-Downloader-3.app/Contents/MacOS/Ghost-Downloader-3"
          chmod u+x "dist/pyinstaller/Ghost-Downloader-3.app/Contents/MacOS/Ghost-Downloader-3"
          rm -rf "dist/Ghost-Downloader-3.build"
          rm -rf "dist/Ghost-Downloader-3.dist"
          mv "dist/Ghost-Downloader-3.app" "dist/Ghost Downloader.app"
          mv "resources/修复软件损坏" "dist/修复软件损坏"
          mv dist/pyinstaller pyinstaller
          mv "resources/修复软件损坏" "pyinstaller/修复软件损坏"

      - name: Create DMG
        run: |
          ln -s /Applications dist/Applications
          ln -s /Applications pyinstaller/Applications
          sleep 1
          hdiutil create -srcfolder "dist/" -volname "Ghost-Downloader-3" -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDZO -size 400m "Ghost-Downloader-v${{ env.VERSION }}-Nuikta-macOS-${{ matrix.architecture }}.dmg"
          hdiutil create -srcfolder "pyinstaller/" -volname "Ghost-Downloader-3" -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDZO -size 400m "Ghost-Downloader-v${{ env.VERSION }}-PyInstaller-macOS-${{ matrix.architecture }}.dmg"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          [
            {
              name: Ghost-Downloader-v${{ env.VERSION }}-Nuikta-macOS-${{ matrix.architecture }},
              path: Ghost-Downloader-v${{ env.VERSION }}-Nuikta-macOS-${{ matrix.architecture }}.dmg
            },{
              name: Ghost-Downloader-v${{ env.VERSION }}-PyInstaller-macOS-${{ matrix.architecture }},
              path: Ghost-Downloader-v${{ env.VERSION }}-PyInstaller-macOS-${{ matrix.architecture }}.dmg
            }
          ]

  build-macos-13-x86_64:
    strategy:
      matrix:
        architecture: [x86_64]
    runs-on: macos-13
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Remove problematic brew libs
        run: |
          brew remove --force --ignore-dependencies openssl@3
          brew cleanup openssl@3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --timeout=300 -r requirements.txt
          pip install nuitka==2.6.4
          pip install pyinstaller

      - name: Build with Nuitka & PyInstaller
        run: |
          python3 -c "import sys; sys.path.append('./app/common'); import config; print(config.VERSION)" > version.txt
          version=$(sed -n '4p' version.txt)
          echo "VERSION=${version}" >> "$GITHUB_ENV"
          rm -rf version.txt
          python3 deploy.py nuitka
          python3 deploy.py pyinstaller
          chmod u+x "dist/Ghost-Downloader-3.app/Contents/MacOS/Ghost-Downloader-3"
          rm -rf "dist/Ghost-Downloader-3.build"
          rm -rf "dist/Ghost-Downloader-3.dist"
          mv "dist/Ghost-Downloader-3.app" "dist/Ghost Downloader.app"
          mv "resources/修复软件损坏" "dist/修复软件损坏"
          mv dist/pyinstaller pyinstaller
          mv "resources/修复软件损坏" "pyinstaller/修复软件损坏"

      - name: Reinstall openssl libs
        run: |  
          brew install openssl@3

      - name: Create DMG
        run: |
          ln -s /Applications dist/Applications
          ln -s /Applications pyinstaller/Applications
          sleep 1
          hdiutil create -srcfolder "dist/" -volname "Ghost-Downloader-3" -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDZO -size 400m "Ghost-Downloader-v${{ env.VERSION }}-Nuikta-macOS-${{ matrix.architecture }}.dmg"
          hdiutil create -srcfolder "pyinstaller/" -volname "Ghost-Downloader-3" -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDZO -size 400m "Ghost-Downloader-v${{ env.VERSION }}-PyInstaller-macOS-${{ matrix.architecture }}.dmg"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Ghost-Downloader-v${{ env.VERSION }}-macOS-${{ matrix.architecture }}
          path: Ghost-Downloader-v${{ env.VERSION }}-macOS-${{ matrix.architecture }}.dmg

  build-ubuntu:
    strategy:
      matrix:
        architecture: [x86_64, arm64]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libegl1-mesa
          pip install --timeout=300 -r requirements.txt
          pip install nuitka==2.6.4
          pip install pyinstaller

      - name: Build with Nuitka & PyInstaller
        run: |
          python3 -c "import sys; sys.path.append('./app/common'); import config; print(config.VERSION)" > version.txt
          version=$(sed -n '4p' version.txt)
          echo "VERSION=${version}" >> "$GITHUB_ENV"
          rm -rf version.txt
          python deploy.py nuitka
          python deploy.py pyinstaller
#          nuitka --module plugins/jy_os_page.py
#          mkdir -p "output/Ghost-Downloader-3.dist/plugins/"
#          mv jy_os_page*.so "output/Ghost-Downloader-3.dist/plugins/"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          [
            {
              name: Ghost-Downloader-v${{ env.VERSION }}-Nuitka-Linux-${{ matrix.architecture }},
              path: dist/Ghost-Downloader-3.dist
            },{
              name: Ghost-Downloader-v${{ env.VERSION }}-PyInstaller-Linux-${{ matrix.architecture }},
              path: dist/pyinstaller
            }
          ]
